import { Client, Guild, Message, Snowflake } from "discord.js";
import { DKRCommands } from "../index";
import { ICallbackObject, ICommand } from "../interfaces";
export declare class Command {
    private readonly _instance;
    private readonly _client;
    private readonly _names;
    private readonly _description;
    private readonly _permissions;
    private readonly _ownerOnly;
    private readonly _guildOnly;
    private readonly _requiresVoice;
    private readonly _requiresSameVoice;
    private readonly _testOnly;
    private readonly _slash;
    private readonly _globalCooldown;
    private readonly _guildCooldown;
    private readonly _userCooldown;
    callback: (obj: ICallbackObject) => void | string | object;
    constructor(instance: DKRCommands, client: Client, names: string[], callback: (obj: ICallbackObject) => void | string | object, { description, permissions, ownerOnly, guildOnly, requiresVoice, requiresSameVoice, testOnly, slash, globalCooldown, guildCooldown, userCooldown }: ICommand);
    execute(message: Message, content: string): Promise<void>;
    isEnabled(guild: Guild | null): Promise<boolean>;
    setEnabled(guild: Guild | null, newEnabled: boolean): Promise<boolean>;
    getAllowedChannels(guild: Guild | null): Promise<Snowflake[]>;
    setAllowedChannels(guild: Guild | null, allowedChannels: Snowflake[]): Promise<Snowflake[]>;
    getRequiredRoles(guild: Guild | null): Promise<Snowflake[]>;
    setRequiredRoles(guild: Guild | null, requiredRoles: Snowflake[]): Promise<Snowflake[]>;
    get name(): string;
    get permissions(): bigint[];
    get ownerOnly(): boolean;
    get guildOnly(): boolean;
    get requiresVoice(): boolean;
    get requiresSameVoice(): boolean;
    get testOnly(): boolean;
    get slash(): boolean | "both";
    get globalCooldown(): number | undefined;
    get guildCooldown(): number | undefined;
    get userCooldown(): number | undefined;
}
